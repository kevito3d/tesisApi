<% include partials/base -%>
<%- include('partials/header', {selected:"plant"}) %>
<section class="container col-10 mt-2 rounded bg-light">
  <form id="editPlant" class="">
    <div class="pt-4 pb-4 pr-1 pl-1">
      <div class="row mb-2 justify-content-center">
        <div class="col-md-5 d-flex align-items-center align-items-center">
          <!-- back icon material -->
          <div class="d-flex align-items-center align-items-center">
            <a href="/plant" style="color: black;">
              <i class="material-icons align-items-center" id="back">
                arrow_back
              </i>
            </a>
            Regresar

          </div>
        </div>
        <div class="col-md-6 d-flex justify-content-end">

          <button type="submit" class="btn btn-primary">Actualizar</button>
        </div>
      </div>

      <div class="row justify-content-center">
        <div class="form-group p-3 col-md-5 left">
          <div class="row col-md-12">
            <label for="scientificname">Nombre Científico</label>
            <input type="text" class="" id="scientificname" placeholder="Nombre Cientifico" value='<%= plant.scn %>' required>
          </div>
          <div class="row col-md-12">
            <label for="name">Nombre Común</label>
            <input type="text" class="" id="name" placeholder="Nombre Comun" value='<%= plant.name %>' required>

          </div>
          <div class="row col-md-12">
            <label for="description">Descripción</label>
            <textarea style="height: 4rem;" name="description" id="description" cols="30" rows="10"><%= plant.description %></textarea>
          </div>

          

        </div>
        <div class="form-group col-md-6 left">
          <div class="form-group  moreImages ">
            <label class="form-row form-label" for="">Imágenes</label>
            <input class="form-row " type="file" name="image" id="images" accept="image/jpg, image/png, image/jpeg" multiple>
            <div class="images" id="imgsContent">


            </div>
            <div class="form-group">
              <label for="descriptionImages" class="form-row">Descripcion para alumnos</label>
              <input type="text" name="" id="descriptionImages" value='<%= plant.descriptionalumnos %>'>
            </div>

          </div>

        </div>
      </div>

      <div class="row justify-content-center">
        <div class="form-group p-3 col-md-5 left">
          <div class="col-12 ">
            <div class="row">
              <label class="" for="">Parte espcifica</label>
              <a class="btn btn-secondary ml-5" href="#openaddPartPlant" data-toggle="modal" role="button" id="openModalAdd">Agregar</a>
            </div>

            <div class="form-group" id="parts">

            </div>
          </div>
        </div>
        <div class="form-group p-3 col-md-6 left">
          <div class="col-12 ">
            <div class="row">
              <label class="" for="">Referencias</label>
              <a class="btn btn-secondary ml-5" href="#openaddReference" data-toggle="modal" role="button">Agregar</a>
            </div>
            <div class="form-group" id="references">
              <% for( let index=0; index < plant.reference.length; index++ ) { %>
              <div class="row bg-secondary text-light rounded m-2 d-flex justify-content-between">
                <div class="col-md-4">
                  <label class="col-sm h-100  d-flex justify-content-right align-items-center " for="">
                    <%= plant.reference[index].canton.province.name %>
                  </label>
                  <input type="text" name="" id="" value='<%= plant.reference[index].canton.province.id %>' hidden>
                </div>
                <div class="col-md-3">
                  <label class="col-sm h-100  d-flex justify-content-right align-items-center " for="">
                    <%= plant.reference[index].canton.name %>
                  </label>
                  <input type="text" name="" id="" value='<%= plant.reference[index].canton.id %>' hidden>
                </div>
                <div class="col-md-4 ">
                  <label class="col-sm h-100  d-flex justify-content-right align-items-center " for="">
                    <%= plant.reference[index].locality %>
                  </label>
                  <input type="text" name="" id="" value='<%= plant.reference[index].locality %>' hidden>
                </div>
                <div onclick="deleteItemReference(this)" class="col-md-1 d-flex justify-content-center align-items-center deleteItem">
                  <i class="material-icons text-danger" title="Delete">&#xE872;</i>
                </div>


              </div>
              <% } %>
            </div>
          </div>

        </div>
      </div>

  </form>
</section>

<div id="openaddReference" class="modal fade">
  <div class="modal-dialog modal-">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Agrega Referencia</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body text-center">
        <div class="form-group ">
          <div class="form-row pb-1">
            <label for="province">Provincia</label>
            <select id="province" class="form-control">
              <% for( let index=0; index < provinces.length; index++ ) { %>

              <option value=<%=provinces[index].id %>><%= provinces[index].name %>
              </option>
              <% } %>
            </select>
          </div>
          <div class="form-row  pb-1">
            <label for="canton">Canton</label>
            <select id="canton" class="form-control">
              <% for( let index=0; index < provinces[0].cantons.length; index++ ) { %>
              <option value=<%=provinces[0].cantons[index].id %>><%= provinces[0].cantons[index].name %>
              </option>
              <% } %>
            </select>
          </div>

          <div class="form-row ">
            <label for="locality">Locatidad</label>
            <input type="text" class="" id="locality" placeholder="Locatidad">

          </div>


        </div>
      </div>
      <div class="modal-footer">
        <button class="btn btn-primary" id="addReference">Agregar Referencia</button>
      </div>
    </div>
  </div>
</div>
<div id="openaddPartPlant" class="modal fade">
  <div class="modal-dialog modal-">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Agrega parte de planta</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form id="addPart">
        <div class="modal-body text-center">
          <div class="form-group ">
            <div class="form-row pb-2">
              <label for="name">Nombre</label>
              <input type="text" class="form-control" id="namePart" placeholder="Nombre" required>


            </div>
            <div class="form-row ">
              <label for="locality">Descripcion</label>
              <input type="text" class="form-control" id="partDescripcion" placeholder="Descripcion">
            </div>
            <!-- input type check -->

            <input type="text" name="" id="idEditPart" hidden>

          </div>
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-primary" id="textModalPart">Agregar</button>
        </div>
      </form>

    </div>
  </div>
</div>

<% include partials/footer %>
<!-- script module -->
<script src="/js/editPlant.js">
</script>
<script>
  let filesList = [{
    id: "000",
    list: []
  }];
  let plant;
  //const d = document;
  /* function btof(data, fileName) {
    const dataArr = data.split(",");
    const byteString = atob(dataArr[1]);
  
    const options = {
      type: "image/jpeg",
      endings: "native",
    };
    const u8Arr = new Uint8Array(byteString.length);
    for (let i = 0; i < byteString.length; i++) {
      u8Arr[i] = byteString.charCodeAt(i);
    }
    return new File([u8Arr], fileName + ".jpg", options);
  }
  function getBase64Image(img) {
    let canvas = document.createElement("canvas");
    canvas.width = img.width;
    canvas.height = img.height;
    const ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0, img.width, img.height);
    const ext = img.src.substring(img.src.lastIndexOf(".") + 1).toLowerCase();
    const dataURL = canvas.toDataURL("image/" + ext);
    // document.body.appendChild(canvas);
    return dataURL;
  } */
  const urlToObject = async (image) => {
    const response = await fetch(image);
    // here image is url/location of image
    const blob = await response.blob();
    const file = new File([blob], "image.jpg", {
      type: blob.type
    });
    return file;
  };

  const clear = (element) => {
    //const $e = d.getElementById(element);
    ////console.log("lo que me llega:", element);
    while (element.firstChild) {
      //The list is LIVE so it will re-index each call
      element.removeChild(element.firstChild);
    }
  };

  function deleteArrayElementByIndex(list, index) {
    return list.filter((item, itemIndex) => itemIndex !== index);
  }

  function arrayFilesToFileList(filesList) {
    return filesList.reduce(function(dataTransfer, file) {
      dataTransfer.items.add(file);
      return dataTransfer;
    }, new DataTransfer()).files;
  }
  async function encodeFileToText(file) {
    return file.text().then((text) => {
      return text;
    });
  }
  async function getUniqFiles(newFiles, currentListFiles) {
    return new Promise((resolve) => {
      Promise.all(newFiles.map((inputFile) => encodeFileToText(inputFile))).then(
        (inputFilesText) => {
          // Check all the files to save
          Promise.all(
            currentListFiles.map((savedFile) => encodeFileToText(savedFile))
          ).then((savedFilesText) => {
            let newFileList = currentListFiles;
            inputFilesText.forEach((inputFileText, index) => {
              if (!savedFilesText.includes(inputFileText)) {
                newFileList = newFileList.concat(newFiles[index]);
              }
            });
            resolve(newFileList);
          });
        }
      );
    });
  }
  const a = async (imgs) => {
    // for (const img of test.images){
    // var image = new Image();
    // image.src = location.origin + img.url;
    //image.setAttribute("crossOrigin", "Anonymous");
    // image.onload = function () {
    // var base64 = getBase64Image(image);
    ////console.log(base64);
    const files = [];
    for (const iterator of imgs) {
      files.push(await urlToObject(location.origin + "/" + iterator.url));
    }

    return files;
    // //console.log({file});
    // document.getElementById("img").src = base64;

    // var formData = new FormData();

    //转换base64到file
    // var file = btof(base64, img.id);
    // imagesPlant.push(file);
    // formData.append("imageName", file);
    // };

    // };
  };

  function viewImagesHome(fileu, imgu, id) {
    //console.log('asssssssssssssssssssssssssssssssssssssssssssss')
    const fileInputMulti = document.getElementById(fileu);
    const multiSelectorUniqPreview = document.getElementById(imgu);
    // Set data to input
    fileInputMulti.files = arrayFilesToFileList(
      filesList.find((element) => element.id == id).list
    );
    renderPreviews(
      filesList.find((element) => element.id == id).list,
      multiSelectorUniqPreview,
      fileInputMulti,
      id
    );
    //console.log(fileInputMulti);
    fileInputMulti.addEventListener("input", async function() {
      const newFilesList = Array.from(fileInputMulti.files);
      ////console.log("files nuevo: ", newFilesList);
      // Update list files
      //console.log("files actual: ", filesList);
      //console.log(
      //   "files: **",
      //   filesList.find((element) => element.id == id).list
      // );
      filesList.find((element) => element.id == id).list = await getUniqFiles(
        newFilesList,
        filesList.find((element) => element.id == id).list
      );
      //console.log(
      //   "files: ",
      //   filesList.find((element) => element.id == id)
      // );
      ////console.log("files antiguos: ", filesList[indexList].list);
      // Only DEMO. Redraw
      renderPreviews(
        filesList.find((element) => element.id == id).list,
        multiSelectorUniqPreview,
        fileInputMulti,
        id
      );
      // Set data to input
      fileInputMulti.files = arrayFilesToFileList(
        filesList.find((element) => element.id == id).list
      );
    });
  }
  
  function openModalEdit(id, name, description) {
    //find the element
    const $inputId = d.getElementById("idEditPart");
    const $inputName = d.getElementById("namePart");
    const $inputDescription = d.getElementById("partDescripcion");
    const $textButton = d.getElementById("textModalPart");
    $textButton.textContent = "Editar";
    
    $inputName.value = name;
    $inputDescription.value = description;

    $inputId.value= id;
  }
  
  
  function ElementPartDinamic(container, name, description, images, descriptionAlumnos) {
    // const $name = d.getElementById(name);
    // if (!verifica(container, $name.value)) {
    // const $description = d.getElementById(description);
    const $container = d.getElementById(container);
    const $part = d.createElement("div");
    $part.classList.add("form-group");
    const $row = d.createElement("div");
    $row.classList.add(
      "row",
      "bg-secondary",
      "text-light",
      "rounded",
      "m-2",
      "d-flex",
      "justify-content-between"
    );
    $row.id = Date.now();
    $row.innerHTML = `
          <div class="col-4 ">  
              <label class="col-sm h-100  d-flex justify-content-right align-items-center " for="">${name}</label>
              <input type="text" name="" id="" value=${name} hidden>
          </div>
          <div class="col-6 ">
              <label class="col-sm h-100  d-flex justify-content-right align-items-center " for="">${description} </label>
              <input type="text" name="" id="" value='${description}' hidden>
          </div>
          
        `;
    const $close = document.createElement("button");
    
    // $close.style = "position: absolute; top:0px; right:10px"
    $close.classList.add("btn", "btn-danger", "btn-sm");
    $close.innerText = `Eliminar`;

    $close.addEventListener("mouseenter", () => {
      $close.style.cursor = "pointer";
      // $close.textContent = '🤣'
    });

    $close.addEventListener("click", (e) => {
      // //console.log(e.target.parentElement);
      $container.removeChild($part);

      //splice the array filesList
      filesList.splice(
        filesList.findIndex((element) => element.id === $row.id),
        1
      );
      //console.log(filesList);
      //delete item to array from index

      //filesList.splice(aux , 1);
    });
    const $actions = d.createElement("div");
    $actions.classList.add("col-md-12", "d-flex","justify-content-between" );
    
    // $close.style = "position: absolute; top:0px; right:10px"

    const $partEdit = d.createElement("button");
    $partEdit.classList.add("btn", "btn-warning", "btn-sm");
    $partEdit.innerText = `Editar`;
    //add href to button
    $partEdit.setAttribute("data-toggle", "modal");
    $partEdit.setAttribute("data-target", "#openaddPartPlant");
    let nameedit = name;
    let descriptionedit = description;
    $partEdit.addEventListener("click", (e) => {
      e.preventDefault();
      
      openModalEdit($row.id, nameedit, descriptionedit);
    });

    $partEdit.addEventListener("mouseenter", () => {
      $partEdit.style.cursor = "pointer";
      // $close.textContent = '🤣'
    });
    

    
    $actions.appendChild($partEdit);
    $actions.appendChild($close);
    $part.appendChild($row);
    $row.appendChild($actions);
    const $imagesPart = d.createElement("div");
    $imagesPart.classList.add("form-group", "moreImages");
    $imagesPart.innerHTML = `
          <label class="form-row form-label" for="">Imagenes para ${name}</label>
          <input class="form-row form-control" type="file" name="image" id="images${name}"
            accept="image/jpg, image/png, image/jpeg" multiple>
          <div class="images" id="imgsContent${name}"></div>
        
        `;
    const $descriptionImages = d.createElement("div");
    $descriptionImages.innerHTML = `
        
          <label for="descriptionImages" class="form-row">Descripcion para alumnos</label>
          <input type="text" value='${descriptionAlumnos}'  id="">
        
        `;
    $part.appendChild($imagesPart);
    $part.appendChild($descriptionImages);
    $container.appendChild($part);
    // $(modal).modal("hide");
    a(images).then(function(data) {
      //console.log({
      //   data
      // });
      filesList.push({
        id: $row.id,
        list: data
      });
      viewImagesHome(`images${name}`, `imgsContent${name}`, $row.id);
      // console.log(filesList.length);
      name = "";
      description = "";
    });
    // }
  }
  async function renderPreviews(currentFileList, target, inputFile, id) {
    //console.log("renderPreviews");
    //
    clear(target);
    currentFileList.forEach((file, index) => {
      var fr = new FileReader();
      fr.readAsDataURL(file);
      fr.onload = function(e) {
        const $div = document.createElement("div");
        $div.classList.add("divImg");
        const $img = document.createElement("img");
        $img.classList.add("imgs");
        $img.src = this.result;
        const $close = document.createElement("div");
        //  $close.style="position: absolute; top:0px; right:10px"
        $close.innerText = "X";
        $close.style = "color:white;";

        $close.addEventListener("click", (e) => {
          currentFileList = deleteArrayElementByIndex(currentFileList, index);

          inputFile.files = arrayFilesToFileList(currentFileList);
          filesList.find((element) => element.id == id).list = currentFileList;
          return renderPreviews(
            filesList.find((element) => element.id == id).list,
            target,
            inputFile,
            id
          );
        });
        $div.appendChild($close);
        $div.appendChild($img);
        target.appendChild($div);
      };
    });
  }

  plant = JSON.parse('<%- JSON.stringify(plant) %>');
  a(plant.images).then(function(data) {
    const fileInputMulti = document.getElementById('images');
    const multiSelectorUniqPreview = document.getElementById('imgsContent');
    //console.log('part images: ', data);
    fileInputMulti.files = arrayFilesToFileList(data)
    filesList[0].list = data
    // filesList[0].id = '000'
    renderPreviews(data, multiSelectorUniqPreview, fileInputMulti, '000');
    //
  });
  for (let index = 0; index < plant.parts.length; index++) {
    const element = plant.parts[index];
    //console.log(element);
    ElementPartDinamic('parts', element.name, element.description, element.images, element.descriptionalumnos);
    // a(element.images).then(function (data) {
    //   const fileInputMulti = document.getElementById('images');
    //   const multiSelectorUniqPreview = document.getElementById('imgsContent');
    //   //console.log("images: ",data);
    //   fileInputMulti.files = arrayFilesToFileList(data)
    //   let id = Date.now()
    //   filesList.push({
    //     id,
    //     list: []
    //   })
    //   renderPreviews(data, multiSelectorUniqPreview, fileInputMulti, id);
    //   //
    // });

  }
</script>

<script>
  $('#province').on('change', function() {
    $('#canton').html('');
    $("#canton").val([]);
    //console.log($('#province').val());

    $.ajax({
      method: "GET",
      url: `/api/province/${$('#province').val()}`,

    }).done(function(msg) {
      //console.log(msg);
      let cantonsOptions;
      if (msg.length <= 0) {
        cantonsOptions = '<option value="0">Sin padre</option>'
      } else {
        $.each(msg.cantons, function(i, canton) {
          cantonsOptions += '<option value=' + canton.id + '>' + canton.name +
            '</option>';
        });
      }
      $('#canton').html(cantonsOptions);
    });
  });
</script>